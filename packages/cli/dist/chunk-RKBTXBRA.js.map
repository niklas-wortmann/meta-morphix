{"version":3,"sources":["../lib/run.ts"],"sourcesContent":["import { fileURLToPath } from \"node:url\";\nimport { runCommand as _runCommand, runMain as _runMain } from \"citty\";\n\nimport { commands } from \"./commands\";\nimport { main } from \"./main\";\n\n// eslint-disable-next-line logical-assignment-operators\nglobalThis.__meta_morphix_cli__ = globalThis.__meta_morphix_cli__ || {\n\t// Programmatic usage fallback\n\tstartTime: Date.now(),\n\tentry: fileURLToPath(\n\t\tnew URL(\n\t\t\timport.meta.url.endsWith(\".ts\")\n\t\t\t\t? \"../bin/metamorphix.mjs\"\n\t\t\t\t: \"../../bin/metamorphix.mjs\",\n\t\t\timport.meta.url,\n\t\t),\n\t),\n};\n\nexport const runMain = () => _runMain(main);\n\nexport async function runCommand(\n\tname: string,\n\targv: string[] = process.argv.slice(2),\n\tdata: { overrides?: Record<string, unknown> } = {},\n) {\n\targv.push(\"--no-clear\"); // Dev\n\n\tif (!(name in commands)) {\n\t\tthrow new Error(`Invalid command ${name}`);\n\t}\n\n\treturn await _runCommand(await commands[name as keyof typeof commands](), {\n\t\trawArgs: argv,\n\t\tdata: {\n\t\t\toverrides: data.overrides || {},\n\t\t},\n\t});\n}\n"],"mappings":";;;;;;;;;;;;AAAA,SAAS,qBAAqB;AAO9B,WAAW,uBAAuB,WAAW,wBAAwB;AAAA;AAAA,EAEpE,WAAW,KAAK,IAAI;AAAA,EACpB,OAAO;AAAA,IACN,IAAI;AAAA,MACH,YAAY,IAAI,SAAS,KAAK,IAC3B,2BACA;AAAA,MACH,YAAY;AAAA,IACb;AAAA,EACD;AACD;AAEO,IAAMA,WAAU,MAAM,QAAS,IAAI;AAE1C,eAAsBC,YACrB,MACA,OAAiB,QAAQ,KAAK,MAAM,CAAC,GACrC,OAAgD,CAAC,GAChD;AACD,OAAK,KAAK,YAAY;AAEtB,MAAI,EAAE,QAAQ,WAAW;AACxB,UAAM,IAAI,MAAM,mBAAmB,IAAI,EAAE;AAAA,EAC1C;AAEA,SAAO,MAAM,WAAY,MAAM,SAAS,IAA6B,EAAE,GAAG;AAAA,IACzE,SAAS;AAAA,IACT,MAAM;AAAA,MACL,WAAW,KAAK,aAAa,CAAC;AAAA,IAC/B;AAAA,EACD,CAAC;AACF;","names":["runMain","runCommand"]}