{"version":3,"sources":["../../../node_modules/.pnpm/citty@0.1.6/node_modules/citty/dist/index.mjs"],"sourcesContent":["import consola from 'consola';\nimport { colors } from 'consola/utils';\n\nfunction toArray(val) {\n  if (Array.isArray(val)) {\n    return val;\n  }\n  return val === void 0 ? [] : [val];\n}\nfunction formatLineColumns(lines, linePrefix = \"\") {\n  const maxLengh = [];\n  for (const line of lines) {\n    for (const [i, element] of line.entries()) {\n      maxLengh[i] = Math.max(maxLengh[i] || 0, element.length);\n    }\n  }\n  return lines.map(\n    (l) => l.map(\n      (c, i) => linePrefix + c[i === 0 ? \"padStart\" : \"padEnd\"](maxLengh[i])\n    ).join(\"  \")\n  ).join(\"\\n\");\n}\nfunction resolveValue(input) {\n  return typeof input === \"function\" ? input() : input;\n}\nclass CLIError extends Error {\n  constructor(message, code) {\n    super(message);\n    this.code = code;\n    this.name = \"CLIError\";\n  }\n}\n\nconst NUMBER_CHAR_RE = /\\d/;\nconst STR_SPLITTERS = [\"-\", \"_\", \"/\", \".\"];\nfunction isUppercase(char = \"\") {\n  if (NUMBER_CHAR_RE.test(char)) {\n    return void 0;\n  }\n  return char !== char.toLowerCase();\n}\nfunction splitByCase(str, separators) {\n  const splitters = separators ?? STR_SPLITTERS;\n  const parts = [];\n  if (!str || typeof str !== \"string\") {\n    return parts;\n  }\n  let buff = \"\";\n  let previousUpper;\n  let previousSplitter;\n  for (const char of str) {\n    const isSplitter = splitters.includes(char);\n    if (isSplitter === true) {\n      parts.push(buff);\n      buff = \"\";\n      previousUpper = void 0;\n      continue;\n    }\n    const isUpper = isUppercase(char);\n    if (previousSplitter === false) {\n      if (previousUpper === false && isUpper === true) {\n        parts.push(buff);\n        buff = char;\n        previousUpper = isUpper;\n        continue;\n      }\n      if (previousUpper === true && isUpper === false && buff.length > 1) {\n        const lastChar = buff.at(-1);\n        parts.push(buff.slice(0, Math.max(0, buff.length - 1)));\n        buff = lastChar + char;\n        previousUpper = isUpper;\n        continue;\n      }\n    }\n    buff += char;\n    previousUpper = isUpper;\n    previousSplitter = isSplitter;\n  }\n  parts.push(buff);\n  return parts;\n}\nfunction upperFirst(str) {\n  return str ? str[0].toUpperCase() + str.slice(1) : \"\";\n}\nfunction lowerFirst(str) {\n  return str ? str[0].toLowerCase() + str.slice(1) : \"\";\n}\nfunction pascalCase(str, opts) {\n  return str ? (Array.isArray(str) ? str : splitByCase(str)).map((p) => upperFirst(opts?.normalize ? p.toLowerCase() : p)).join(\"\") : \"\";\n}\nfunction camelCase(str, opts) {\n  return lowerFirst(pascalCase(str || \"\", opts));\n}\nfunction kebabCase(str, joiner) {\n  return str ? (Array.isArray(str) ? str : splitByCase(str)).map((p) => p.toLowerCase()).join(joiner ?? \"-\") : \"\";\n}\n\nfunction toArr(any) {\n  return any == void 0 ? [] : Array.isArray(any) ? any : [any];\n}\nfunction toVal(out, key, val, opts) {\n  let x;\n  const old = out[key];\n  const nxt = ~opts.string.indexOf(key) ? val == void 0 || val === true ? \"\" : String(val) : typeof val === \"boolean\" ? val : ~opts.boolean.indexOf(key) ? val === \"false\" ? false : val === \"true\" || (out._.push((x = +val, x * 0 === 0) ? x : val), !!val) : (x = +val, x * 0 === 0) ? x : val;\n  out[key] = old == void 0 ? nxt : Array.isArray(old) ? old.concat(nxt) : [old, nxt];\n}\nfunction parseRawArgs(args = [], opts = {}) {\n  let k;\n  let arr;\n  let arg;\n  let name;\n  let val;\n  const out = { _: [] };\n  let i = 0;\n  let j = 0;\n  let idx = 0;\n  const len = args.length;\n  const alibi = opts.alias !== void 0;\n  const strict = opts.unknown !== void 0;\n  const defaults = opts.default !== void 0;\n  opts.alias = opts.alias || {};\n  opts.string = toArr(opts.string);\n  opts.boolean = toArr(opts.boolean);\n  if (alibi) {\n    for (k in opts.alias) {\n      arr = opts.alias[k] = toArr(opts.alias[k]);\n      for (i = 0; i < arr.length; i++) {\n        (opts.alias[arr[i]] = arr.concat(k)).splice(i, 1);\n      }\n    }\n  }\n  for (i = opts.boolean.length; i-- > 0; ) {\n    arr = opts.alias[opts.boolean[i]] || [];\n    for (j = arr.length; j-- > 0; ) {\n      opts.boolean.push(arr[j]);\n    }\n  }\n  for (i = opts.string.length; i-- > 0; ) {\n    arr = opts.alias[opts.string[i]] || [];\n    for (j = arr.length; j-- > 0; ) {\n      opts.string.push(arr[j]);\n    }\n  }\n  if (defaults) {\n    for (k in opts.default) {\n      name = typeof opts.default[k];\n      arr = opts.alias[k] = opts.alias[k] || [];\n      if (opts[name] !== void 0) {\n        opts[name].push(k);\n        for (i = 0; i < arr.length; i++) {\n          opts[name].push(arr[i]);\n        }\n      }\n    }\n  }\n  const keys = strict ? Object.keys(opts.alias) : [];\n  for (i = 0; i < len; i++) {\n    arg = args[i];\n    if (arg === \"--\") {\n      out._ = out._.concat(args.slice(++i));\n      break;\n    }\n    for (j = 0; j < arg.length; j++) {\n      if (arg.charCodeAt(j) !== 45) {\n        break;\n      }\n    }\n    if (j === 0) {\n      out._.push(arg);\n    } else if (arg.substring(j, j + 3) === \"no-\") {\n      name = arg.slice(Math.max(0, j + 3));\n      if (strict && !~keys.indexOf(name)) {\n        return opts.unknown(arg);\n      }\n      out[name] = false;\n    } else {\n      for (idx = j + 1; idx < arg.length; idx++) {\n        if (arg.charCodeAt(idx) === 61) {\n          break;\n        }\n      }\n      name = arg.substring(j, idx);\n      val = arg.slice(Math.max(0, ++idx)) || i + 1 === len || (\"\" + args[i + 1]).charCodeAt(0) === 45 || args[++i];\n      arr = j === 2 ? [name] : name;\n      for (idx = 0; idx < arr.length; idx++) {\n        name = arr[idx];\n        if (strict && !~keys.indexOf(name)) {\n          return opts.unknown(\"-\".repeat(j) + name);\n        }\n        toVal(out, name, idx + 1 < arr.length || val, opts);\n      }\n    }\n  }\n  if (defaults) {\n    for (k in opts.default) {\n      if (out[k] === void 0) {\n        out[k] = opts.default[k];\n      }\n    }\n  }\n  if (alibi) {\n    for (k in out) {\n      arr = opts.alias[k] || [];\n      while (arr.length > 0) {\n        out[arr.shift()] = out[k];\n      }\n    }\n  }\n  return out;\n}\n\nfunction parseArgs(rawArgs, argsDef) {\n  const parseOptions = {\n    boolean: [],\n    string: [],\n    mixed: [],\n    alias: {},\n    default: {}\n  };\n  const args = resolveArgs(argsDef);\n  for (const arg of args) {\n    if (arg.type === \"positional\") {\n      continue;\n    }\n    if (arg.type === \"string\") {\n      parseOptions.string.push(arg.name);\n    } else if (arg.type === \"boolean\") {\n      parseOptions.boolean.push(arg.name);\n    }\n    if (arg.default !== void 0) {\n      parseOptions.default[arg.name] = arg.default;\n    }\n    if (arg.alias) {\n      parseOptions.alias[arg.name] = arg.alias;\n    }\n  }\n  const parsed = parseRawArgs(rawArgs, parseOptions);\n  const [...positionalArguments] = parsed._;\n  const parsedArgsProxy = new Proxy(parsed, {\n    get(target, prop) {\n      return target[prop] ?? target[camelCase(prop)] ?? target[kebabCase(prop)];\n    }\n  });\n  for (const [, arg] of args.entries()) {\n    if (arg.type === \"positional\") {\n      const nextPositionalArgument = positionalArguments.shift();\n      if (nextPositionalArgument !== void 0) {\n        parsedArgsProxy[arg.name] = nextPositionalArgument;\n      } else if (arg.default === void 0 && arg.required !== false) {\n        throw new CLIError(\n          `Missing required positional argument: ${arg.name.toUpperCase()}`,\n          \"EARG\"\n        );\n      } else {\n        parsedArgsProxy[arg.name] = arg.default;\n      }\n    } else if (arg.required && parsedArgsProxy[arg.name] === void 0) {\n      throw new CLIError(`Missing required argument: --${arg.name}`, \"EARG\");\n    }\n  }\n  return parsedArgsProxy;\n}\nfunction resolveArgs(argsDef) {\n  const args = [];\n  for (const [name, argDef] of Object.entries(argsDef || {})) {\n    args.push({\n      ...argDef,\n      name,\n      alias: toArray(argDef.alias)\n    });\n  }\n  return args;\n}\n\nfunction defineCommand(def) {\n  return def;\n}\nasync function runCommand(cmd, opts) {\n  const cmdArgs = await resolveValue(cmd.args || {});\n  const parsedArgs = parseArgs(opts.rawArgs, cmdArgs);\n  const context = {\n    rawArgs: opts.rawArgs,\n    args: parsedArgs,\n    data: opts.data,\n    cmd\n  };\n  if (typeof cmd.setup === \"function\") {\n    await cmd.setup(context);\n  }\n  let result;\n  try {\n    const subCommands = await resolveValue(cmd.subCommands);\n    if (subCommands && Object.keys(subCommands).length > 0) {\n      const subCommandArgIndex = opts.rawArgs.findIndex(\n        (arg) => !arg.startsWith(\"-\")\n      );\n      const subCommandName = opts.rawArgs[subCommandArgIndex];\n      if (subCommandName) {\n        if (!subCommands[subCommandName]) {\n          throw new CLIError(\n            `Unknown command \\`${subCommandName}\\``,\n            \"E_UNKNOWN_COMMAND\"\n          );\n        }\n        const subCommand = await resolveValue(subCommands[subCommandName]);\n        if (subCommand) {\n          await runCommand(subCommand, {\n            rawArgs: opts.rawArgs.slice(subCommandArgIndex + 1)\n          });\n        }\n      } else if (!cmd.run) {\n        throw new CLIError(`No command specified.`, \"E_NO_COMMAND\");\n      }\n    }\n    if (typeof cmd.run === \"function\") {\n      result = await cmd.run(context);\n    }\n  } finally {\n    if (typeof cmd.cleanup === \"function\") {\n      await cmd.cleanup(context);\n    }\n  }\n  return { result };\n}\nasync function resolveSubCommand(cmd, rawArgs, parent) {\n  const subCommands = await resolveValue(cmd.subCommands);\n  if (subCommands && Object.keys(subCommands).length > 0) {\n    const subCommandArgIndex = rawArgs.findIndex((arg) => !arg.startsWith(\"-\"));\n    const subCommandName = rawArgs[subCommandArgIndex];\n    const subCommand = await resolveValue(subCommands[subCommandName]);\n    if (subCommand) {\n      return resolveSubCommand(\n        subCommand,\n        rawArgs.slice(subCommandArgIndex + 1),\n        cmd\n      );\n    }\n  }\n  return [cmd, parent];\n}\n\nasync function showUsage(cmd, parent) {\n  try {\n    consola.log(await renderUsage(cmd, parent) + \"\\n\");\n  } catch (error) {\n    consola.error(error);\n  }\n}\nasync function renderUsage(cmd, parent) {\n  const cmdMeta = await resolveValue(cmd.meta || {});\n  const cmdArgs = resolveArgs(await resolveValue(cmd.args || {}));\n  const parentMeta = await resolveValue(parent?.meta || {});\n  const commandName = `${parentMeta.name ? `${parentMeta.name} ` : \"\"}` + (cmdMeta.name || process.argv[1]);\n  const argLines = [];\n  const posLines = [];\n  const commandsLines = [];\n  const usageLine = [];\n  for (const arg of cmdArgs) {\n    if (arg.type === \"positional\") {\n      const name = arg.name.toUpperCase();\n      const isRequired = arg.required !== false && arg.default === void 0;\n      const defaultHint = arg.default ? `=\"${arg.default}\"` : \"\";\n      posLines.push([\n        \"`\" + name + defaultHint + \"`\",\n        arg.description || \"\",\n        arg.valueHint ? `<${arg.valueHint}>` : \"\"\n      ]);\n      usageLine.push(isRequired ? `<${name}>` : `[${name}]`);\n    } else {\n      const isRequired = arg.required === true && arg.default === void 0;\n      const argStr = (arg.type === \"boolean\" && arg.default === true ? [\n        ...(arg.alias || []).map((a) => `--no-${a}`),\n        `--no-${arg.name}`\n      ].join(\", \") : [...(arg.alias || []).map((a) => `-${a}`), `--${arg.name}`].join(\n        \", \"\n      )) + (arg.type === \"string\" && (arg.valueHint || arg.default) ? `=${arg.valueHint ? `<${arg.valueHint}>` : `\"${arg.default || \"\"}\"`}` : \"\");\n      argLines.push([\n        \"`\" + argStr + (isRequired ? \" (required)\" : \"\") + \"`\",\n        arg.description || \"\"\n      ]);\n      if (isRequired) {\n        usageLine.push(argStr);\n      }\n    }\n  }\n  if (cmd.subCommands) {\n    const commandNames = [];\n    const subCommands = await resolveValue(cmd.subCommands);\n    for (const [name, sub] of Object.entries(subCommands)) {\n      const subCmd = await resolveValue(sub);\n      const meta = await resolveValue(subCmd?.meta);\n      commandsLines.push([`\\`${name}\\``, meta?.description || \"\"]);\n      commandNames.push(name);\n    }\n    usageLine.push(commandNames.join(\"|\"));\n  }\n  const usageLines = [];\n  const version = cmdMeta.version || parentMeta.version;\n  usageLines.push(\n    colors.gray(\n      `${cmdMeta.description} (${commandName + (version ? ` v${version}` : \"\")})`\n    ),\n    \"\"\n  );\n  const hasOptions = argLines.length > 0 || posLines.length > 0;\n  usageLines.push(\n    `${colors.underline(colors.bold(\"USAGE\"))} \\`${commandName}${hasOptions ? \" [OPTIONS]\" : \"\"} ${usageLine.join(\" \")}\\``,\n    \"\"\n  );\n  if (posLines.length > 0) {\n    usageLines.push(colors.underline(colors.bold(\"ARGUMENTS\")), \"\");\n    usageLines.push(formatLineColumns(posLines, \"  \"));\n    usageLines.push(\"\");\n  }\n  if (argLines.length > 0) {\n    usageLines.push(colors.underline(colors.bold(\"OPTIONS\")), \"\");\n    usageLines.push(formatLineColumns(argLines, \"  \"));\n    usageLines.push(\"\");\n  }\n  if (commandsLines.length > 0) {\n    usageLines.push(colors.underline(colors.bold(\"COMMANDS\")), \"\");\n    usageLines.push(formatLineColumns(commandsLines, \"  \"));\n    usageLines.push(\n      \"\",\n      `Use \\`${commandName} <command> --help\\` for more information about a command.`\n    );\n  }\n  return usageLines.filter((l) => typeof l === \"string\").join(\"\\n\");\n}\n\nasync function runMain(cmd, opts = {}) {\n  const rawArgs = opts.rawArgs || process.argv.slice(2);\n  const showUsage$1 = opts.showUsage || showUsage;\n  try {\n    if (rawArgs.includes(\"--help\") || rawArgs.includes(\"-h\")) {\n      await showUsage$1(...await resolveSubCommand(cmd, rawArgs));\n      process.exit(0);\n    } else if (rawArgs.length === 1 && rawArgs[0] === \"--version\") {\n      const meta = typeof cmd.meta === \"function\" ? await cmd.meta() : await cmd.meta;\n      if (!meta?.version) {\n        throw new CLIError(\"No version specified\", \"E_NO_VERSION\");\n      }\n      consola.log(meta.version);\n    } else {\n      await runCommand(cmd, { rawArgs });\n    }\n  } catch (error) {\n    const isCLIError = error instanceof CLIError;\n    if (!isCLIError) {\n      consola.error(error, \"\\n\");\n    }\n    if (isCLIError) {\n      await showUsage$1(...await resolveSubCommand(cmd, rawArgs));\n    }\n    consola.error(error.message);\n    process.exit(1);\n  }\n}\nfunction createMain(cmd) {\n  return (opts = {}) => runMain(cmd, opts);\n}\n\nexport { createMain, defineCommand, parseArgs, renderUsage, runCommand, runMain, showUsage };\n"],"mappings":"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","names":[]}